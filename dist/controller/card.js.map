{"version":3,"sources":["../../src/controller/card.js"],"names":["ip","require","config","db","api","post","authenticate","req","res","request","url","headers","secret","paystack_token","json","user","body","email","amount","card","number","cvv","expiry_month","expiry_year","pin","reusable","error","response","status","data","msg","display_text","message","newCard","Card","type","authorization","brand","last4","authorization_code","signature","save","err","find","cards","otp","reference","get","params","id","PBFPubKey","cardno","expirymonth","expiryyear","IP","address","txRef","Date","now","secretKey","helpers","getKey","reqClient","encrypt","JSON","stringify","client","console","log","delete","findById","send","remove"],"mappings":";;;;;;AAAA;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;AACA;;AACA;;;;;;AAEA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;;kBAEe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;;AAEA;AACAA,MAAIC,IAAJ,CAAS,MAAT,EAAiBC,4BAAjB,EAA+B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrCC,sBAAQJ,IAAR,CAAa;AACXK,WAAK,gCADM;AAEXC,eAAU;AACN,yBAAkB,YAAUT,OAAOU,MAAP,CAAcC;AADpC,OAFC;AAKXC,YAAM;AACJC,cAAMR,IAAIS,IAAJ,CAASD,IADX;AAEJE,eAAOV,IAAIS,IAAJ,CAASC,KAFZ;AAGJC,gBAAQ,CAHJ;AAIJC,cAAM;AACJC,kBAAQb,IAAIS,IAAJ,CAASI,MADb;AAEJC,eAAKd,IAAIS,IAAJ,CAASK,GAFV;AAGJC,wBAAcf,IAAIS,IAAJ,CAASM,YAHnB;AAIJC,uBAAahB,IAAIS,IAAJ,CAASO;AAJlB,SAJF;AAUJC,aAAKjB,IAAIS,IAAJ,CAASQ,GAVV;AAWJC,kBAAU;AAXN;AALK,KAAb,EAkBG,UAASC,KAAT,EAAgBC,QAAhB,EAA0BX,IAA1B,EAA+B;AAChC,UAAIW,SAASX,IAAT,CAAcY,MAAlB,EAA0B;AACtB,YAAID,SAASX,IAAT,CAAca,IAAd,CAAmBD,MAAnB,IAA6B,UAAjC,EAA6C;AAC3CpB,cAAIM,IAAJ,CAAS,EAAEc,QAAQ,IAAV;AACLE,iBAAKH,SAASX,IAAT,CAAca,IAAd,CAAmBE,YADnB;AAELC,qBAAS,UAFJ;AAGLH,kBAAMF,SAASX,IAAT,CAAca,IAHf,EAAT;AAID,SALD,MAKO,IAAIF,SAASX,IAAT,CAAca,IAAd,CAAmBD,MAAnB,IAA6B,YAAjC,EAA+C;AACpDpB,cAAIM,IAAJ,CAAS,EAAEc,QAAQ,IAAV;AACPE,iBAAKH,SAASX,IAAT,CAAca,IAAd,CAAmBE,YADjB;AAEPC,qBAAS,UAFF;AAGPH,kBAAMF,SAASX,IAAT,CAAca,IAHb,EAAT;AAID,SALM,MAKA,IAAIF,SAASX,IAAT,CAAca,IAAd,CAAmBD,MAAnB,IAA6B,SAAjC,EAA4C;AAC/C,cAAIK,UAAU,IAAIC,cAAJ,EAAd;AACAD,kBAAQlB,IAAR,GAAeR,IAAIS,IAAJ,CAASD,IAAxB;AACAkB,kBAAQE,IAAR,GAAeR,SAASX,IAAT,CAAca,IAAd,CAAmBO,aAAnB,CAAiCC,KAAhD;AACAJ,kBAAQK,KAAR,GAAgBX,SAASX,IAAT,CAAca,IAAd,CAAmBO,aAAnB,CAAiCE,KAAjD;AACAL,kBAAQM,kBAAR,GAA6BZ,SAASX,IAAT,CAAca,IAAd,CAAmBO,aAAnB,CAAiCG,kBAA9D;AACAN,kBAAQO,SAAR,GAAoBb,SAASX,IAAT,CAAca,IAAd,CAAmBO,aAAnB,CAAiCI,SAArD;AACAP,kBAAQQ,IAAR,CAAa,eAAO;AACpB,gBAAIC,GAAJ,EAAS;AACLlC,kBAAIoB,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB,EAACc,QAAQ,KAAT,EAAgBE,KAAKY,GAArB,EAArB;AACA;AACH;AACDR,2BAAKS,IAAL,CAAU,EAAC5B,MAAMR,IAAIS,IAAJ,CAASD,IAAhB,EAAV,EAAiC,UAAC2B,GAAD,EAAME,KAAN,EAAgB;AAC7C,kBAAIF,GAAJ,EAAS;AACLlC,oBAAIoB,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB,EAACc,QAAQ,KAAT,EAAgBE,KAAKY,GAArB,EAArB;AACA;AACH;AACDlC,kBAAIM,IAAJ,CAAS,EAAEc,QAAQ,IAAV,EAAgBI,SAAS,SAAzB,EAAoCH,MAAMe,KAA1C,EAAT;AACH,aAND;AAOH,WAZG;AAaH,SApBM,MAoBA;AACLpC,cAAIM,IAAJ,CAAS,EAAEc,QAAQ,IAAV;AACPE,iBAAKH,SAASX,IAAT,CAAca,IAAd,CAAmBD,MADjB;AAEPI,qBAASL,SAASX,IAAT,CAAca,IAAd,CAAmBD,MAFrB;AAGPC,kBAAMF,SAASX,IAAT,CAAca,IAHb,EAAT;AAID;AAEJ,OAtCD,MAsCO;AACLrB,YAAIoB,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB,EAACc,QAAQ,KAAT,EAAgBE,KAAKH,SAASX,IAAT,CAAca,IAAd,CAAmBG,OAAxC,EAArB;AACA;AAED;AACJ,KA9DC;AA+DR,GAhEA;;AAoEF5B,MAAIC,IAAJ,CAAS,WAAT,EAAsBC,4BAAtB,EAAoC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChDC,sBAAQJ,IAAR,CAAa;AACXK,WAAK,2CADM;AAEXC,eAAU;AACN,yBAAkB,YAAUT,OAAOU,MAAP,CAAcC;AADpC,OAFC;AAKXC,YAAM;AACJ+B,aAAKtC,IAAIS,IAAJ,CAAS6B,GADV;AAEJC,mBAAWvC,IAAIS,IAAJ,CAAS8B,SAFhB;AAGJtB,aAAKjB,IAAIS,IAAJ,CAASQ,GAHV;AAIJT,cAAMR,IAAIS,IAAJ,CAASD;AAJX;AALK,KAAb,EAWG,UAASW,KAAT,EAAgBC,QAAhB,EAA0BX,IAA1B,EAA+B;AAChC,UAAIW,SAASX,IAAT,CAAcY,MAAlB,EAA0B;AACtB,YAAID,SAASX,IAAT,CAAca,IAAd,CAAmBD,MAAnB,IAA6B,YAAjC,EAA+C;AAC7CpB,cAAIM,IAAJ,CAAS,EAAEc,QAAQ,IAAV;AACPE,iBAAKH,SAASX,IAAT,CAAca,IAAd,CAAmBE,YADjB;AAEPC,qBAAS,UAFF;AAGPH,kBAAMF,SAASX,IAAT,CAAca,IAHb,EAAT;AAID,SALD,MAKO,IAAIF,SAASX,IAAT,CAAca,IAAd,CAAmBD,MAAnB,IAA6B,SAAjC,EAA4C;AAC/C,cAAIK,UAAU,IAAIC,cAAJ,EAAd;AACAD,kBAAQlB,IAAR,GAAeR,IAAIS,IAAJ,CAASD,IAAxB;AACAkB,kBAAQT,GAAR,GAAcjB,IAAIS,IAAJ,CAASQ,GAAvB;AACAS,kBAAQE,IAAR,GAAeR,SAASX,IAAT,CAAca,IAAd,CAAmBO,aAAnB,CAAiCC,KAAhD;AACAJ,kBAAQK,KAAR,GAAgBX,SAASX,IAAT,CAAca,IAAd,CAAmBO,aAAnB,CAAiCE,KAAjD;AACAL,kBAAQM,kBAAR,GAA6BZ,SAASX,IAAT,CAAca,IAAd,CAAmBO,aAAnB,CAAiCG,kBAA9D;AACAN,kBAAQO,SAAR,GAAoBb,SAASX,IAAT,CAAca,IAAd,CAAmBO,aAAnB,CAAiCI,SAArD;AACAP,kBAAQQ,IAAR,CAAa,eAAO;AACpB,gBAAIC,GAAJ,EAAS;AACLlC,kBAAIoB,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB,EAACc,QAAQ,KAAT,EAAgBE,KAAKY,GAArB,EAArB;AACA;AACH;AACDR,2BAAKS,IAAL,CAAU,EAAC5B,MAAMR,IAAIS,IAAJ,CAASD,IAAhB,EAAV,EAAiC,UAAC2B,GAAD,EAAME,KAAN,EAAgB;AAC7C,kBAAIF,GAAJ,EAAS;AACLlC,oBAAIoB,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB,EAACc,QAAQ,KAAT,EAAgBE,KAAKY,GAArB,EAArB;AACA;AACH;AACDlC,kBAAIM,IAAJ,CAAS,EAAEc,QAAQ,IAAV,EAAgBI,SAAS,2BAAzB,EAAsDH,MAAMe,KAA5D,EAAT;AACH,aAND;AAOH,WAZG;AAaL,SArBQ,MAqBF;AACLpC,cAAIM,IAAJ,CAAS,EAAEc,QAAQ,IAAV;AACPE,iBAAKH,SAASX,IAAT,CAAca,IAAd,CAAmBD,MADjB;AAEPI,qBAASL,SAASX,IAAT,CAAca,IAAd,CAAmBD,MAFrB;AAGPC,kBAAMF,SAASX,IAAT,CAAca,IAHb,EAAT;AAID;AAEF,OAlCD,MAkCO;AACLrB,YAAIoB,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB,EAACc,QAAQ,KAAT,EAAgBE,KAAKH,SAASX,IAAT,CAAca,IAAd,CAAmBG,OAAxC,EAArB;AACA;AAED;AACJ,KAnDC;AAoDD,GArDD;;AA0DE;AACE5B,MAAI2C,GAAJ,CAAQ,MAAR,EAAgBzC,4BAAhB,EAA8B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxC0B,mBAAKS,IAAL,CAAU,EAAC5B,MAAMR,IAAIyC,MAAJ,CAAWC,EAAlB,EAAV,EAAiC,UAACP,GAAD,EAAME,KAAN,EAAgB;AAC7C,UAAIF,GAAJ,EAAS;AACTlC,YAAIoB,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB,EAACc,QAAQ,KAAT,EAAgBE,KAAKY,GAArB,EAArB;AACA;AACC;AACDlC,UAAIM,IAAJ,CAAS,EAACc,QAAQ,IAAT,EAAeC,MAAMe,KAArB,EAAT;AACH,KAND;AAOH,GARD;;AAUAxC,MAAIC,IAAJ,CAAS,OAAT,EAAkB,UAACE,GAAD,EAAMC,GAAN,EAAc;AAC5B,QAAIQ,OAAO;AACTkC,iBAAW3C,IAAIS,IAAJ,CAASkC,SADX;AAETC,cAAQ5C,IAAIS,IAAJ,CAASmC,MAFR;AAGT9B,WAAKd,IAAIS,IAAJ,CAASK,GAHL;AAIT+B,mBAAa7C,IAAIS,IAAJ,CAASoC,WAJb;AAKTC,kBAAY9C,IAAIS,IAAJ,CAASqC,UALZ;AAMTnC,cAAQX,IAAIS,IAAJ,CAASE,MANR;AAOTD,aAAOV,IAAIS,IAAJ,CAASC,KAPP;AAQTqC,UAAItD,GAAGuD,OAAH,EARK;AASTC,aAAO,QAAOC,KAAKC,GAAL;AATL,KAAX;;AAYA,QAAMC,YAAYC,kBAAQC,MAAR,CAAe,4CAAf,CAAlB;AACA,QAAMC,YAAYF,kBAAQG,OAAR,CAAgBJ,SAAhB,EAA2BK,KAAKC,SAAL,CAAejD,IAAf,CAA3B,CAAlB;;AAEFP,sBAAQJ,IAAR,CAAa;AACXK,WAAK,sDADM;AAEXC,eAAU;AACN,yBAAkB,mDADZ;AAEN,wBAAgB;AAFV,OAFC;AAMXG,YAAM;AACFoD,gBAAQJ,SADN;AAEFZ,mBAAW3C,IAAIS,IAAJ,CAASkC;AACpB;AAHE;AANK,KAAb,EAWG,UAASxB,KAAT,EAAgBC,QAAhB,EAA0BX,IAA1B,EAA+B;AAChCmD,cAAQC,GAAR,CAAYJ,KAAKC,SAAL,CAAejD,IAAf,CAAZ;AACA;AACH,KAdC;AAeH,GA/BC;;AAmCF;AACAZ,MAAIiE,MAAJ,CAAW,MAAX,EAAmB/D,4BAAnB,EAAiC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7C0B,mBAAKoC,QAAL,CAAc/D,IAAIyC,MAAJ,CAAWC,EAAzB,EAA6B,UAACP,GAAD,EAAMvB,IAAN,EAAe;AAC1C,UAAIuB,GAAJ,EAAS;AACPlC,YAAIoB,MAAJ,CAAW,GAAX,EAAgB2C,IAAhB,CAAqB7B,GAArB;AACA;AACD;AACD,UAAIvB,SAAS,IAAb,EAAmB;AACjBX,YAAIoB,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB,EAACc,QAAQ,KAAT,EAAgBE,KAAK,gBAArB,EAArB;AACA;AACD;AACDI,qBAAKsC,MAAL,CAAY;AACV,eAAOjE,IAAIyC,MAAJ,CAAWC;AADR,OAAZ,EAEE,UAACP,GAAD,EAAMvB,IAAN,EAAe;AACb,YAAIuB,GAAJ,EAAS;AACPlC,cAAIoB,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB,EAACc,QAAQ,KAAT,EAAgBE,KAAKY,GAArB,EAArB;AACA;AACD;AACDR,uBAAKS,IAAL,CAAU,EAAC5B,MAAMR,IAAIyC,MAAJ,CAAWjC,IAAlB,EAAV,EAAmC,UAAC2B,GAAD,EAAME,KAAN,EAAgB;AACjD,cAAIF,GAAJ,EAAS;AACPlC,gBAAIoB,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB,EAACc,QAAQ,KAAT,EAAgBE,KAAKY,GAArB,EAArB;AACA;AACD;AACDlC,cAAIM,IAAJ,CAAS,EAAEc,QAAQ,IAAV,EAAgBI,SAAS,2BAAzB,EAAsDH,MAAMe,KAA5D,EAAT;AACD,SAND;AAOD,OAdH;AAeD,KAxBD;AAyBD,GA1BD;;AA4BA,SAAOxC,GAAP;AACD,C","file":"card.js","sourcesContent":["import { Router } from \"express\";\nimport request from 'request';\n\nimport Card from \"../model/card\";\nimport { authenticate } from \"../middleware/authmiddleware\";\nimport config from \"../config\";\nimport { adminAuthorization, userAuthentication } from \"../middleware/adminAuth\";\nimport { getID } from \"../helpers/auth\";\nimport helpers from \"../helpers\";\n\nvar ip = require(\"ip\");\n\nexport default ({ config, db }) => {\n  let api = Router();\n\n  //'v1/foodtruck/add'\n  api.post('/add', authenticate, (req, res) => {\n          request.post({\n            url: 'https://api.paystack.co/charge',\n            headers : {\n                \"Authorization\" : \"Bearer \"+config.secret.paystack_token\n            },\n            json: { \n              user: req.body.user,\n              email: req.body.email, \n              amount: 1,\n              card: {\n                number: req.body.number,\n                cvv: req.body.cvv, \n                expiry_month: req.body.expiry_month,\n                expiry_year: req.body.expiry_year\n              },\n              pin: req.body.pin,\n              reusable: true\n            }\n          }, function(error, response, body){\n            if (response.body.status) {\n                if (response.body.data.status == 'send_otp') {\n                  res.json({ status: true,\n                      msg: response.body.data.display_text,\n                      message: \"send_otp\", \n                      data: response.body.data });\n                } else if (response.body.data.status == 'send_phone') {\n                  res.json({ status: true,\n                    msg: response.body.data.display_text,\n                    message: \"send_otp\", \n                    data: response.body.data });\n                } else if (response.body.data.status == 'success') {\n                    let newCard = new Card();\n                    newCard.user = req.body.user;\n                    newCard.type = response.body.data.authorization.brand;\n                    newCard.last4 = response.body.data.authorization.last4;\n                    newCard.authorization_code = response.body.data.authorization.authorization_code;\n                    newCard.signature = response.body.data.authorization.signature;\n                    newCard.save(err => {\n                    if (err) {\n                        res.status(403).json({status: false, msg: err});\n                        return;\n                    }\n                    Card.find({user: req.body.user}, (err, cards) => {\n                        if (err) {\n                            res.status(403).json({status: false, msg: err});\n                            return;\n                        }\n                        res.json({ status: true, message: \"success\", data: cards });\n                    });\n                });\n                } else {\n                  res.json({ status: true,\n                    msg: response.body.data.status,\n                    message: response.body.data.status, \n                    data: response.body.data });\n                }\n                \n            } else {\n              res.status(200).json({status: false, msg: response.body.data.message});\n              return;\n         \n            }\n        });\n });\n\n\n\napi.post('/send_otp', authenticate, (req, res) => {\n  request.post({\n    url: 'https://api.paystack.co/charge/submit_otp',\n    headers : {\n        \"Authorization\" : \"Bearer \"+config.secret.paystack_token\n    },\n    json: { \n      otp: req.body.otp, \n      reference: req.body.reference,\n      pin: req.body.pin,\n      user: req.body.user\n    }\n  }, function(error, response, body){\n    if (response.body.status) {\n        if (response.body.data.status == 'send_phone') {\n          res.json({ status: true,\n            msg: response.body.data.display_text,\n            message: \"send_otp\", \n            data: response.body.data });\n        } else if (response.body.data.status == 'success') {\n            let newCard = new Card();\n            newCard.user = req.body.user;\n            newCard.pin = req.body.pin;\n            newCard.type = response.body.data.authorization.brand;\n            newCard.last4 = response.body.data.authorization.last4;\n            newCard.authorization_code = response.body.data.authorization.authorization_code;\n            newCard.signature = response.body.data.authorization.signature;\n            newCard.save(err => {\n            if (err) {\n                res.status(403).json({status: false, msg: err});\n                return;\n            }\n            Card.find({user: req.body.user}, (err, cards) => {\n                if (err) {\n                    res.status(403).json({status: false, msg: err});\n                    return;\n                }\n                res.json({ status: true, message: \"Card successfully created\", data: cards });\n            });\n        });\n      } else {\n        res.json({ status: true,\n          msg: response.body.data.status,\n          message: response.body.data.status, \n          data: response.body.data });\n      }\n        \n    } else {\n      res.status(200).json({status: false, msg: response.body.data.message});\n      return;\n \n    }\n});\n});\n\n\n\n\n  //'v1/foodtruck'\n    api.get('/:id', authenticate, (req, res) => {\n        Card.find({user: req.params.id}, (err, cards) => {\n            if (err) {\n            res.status(403).json({status: false, msg: err});\n            return;\n            }\n            res.json({status: true, data: cards});\n        });\n    });\n\n    api.post('/test', (req, res) => {\n        let body = { \n          PBFPubKey: req.body.PBFPubKey,\n          cardno: req.body.cardno,\n          cvv: req.body.cvv,\n          expirymonth: req.body.expirymonth,\n          expiryyear: req.body.expiryyear,\n          amount: req.body.amount,\n          email: req.body.email,\n          IP: ip.address(),\n          txRef: \"MC-\"+ Date.now()\n        }\n\n        const secretKey = helpers.getKey('FLWSECK-02d3111b7b4b8c8e6ca40c320a0aab3f-X')\n        const reqClient = helpers.encrypt(secretKey, JSON.stringify(body));\n\n      request.post({\n        url: 'https://api.ravepay.co/flwv3-pug/getpaidx/api/charge',\n        headers : {\n            \"Authorization\" : \"Bearer FLWSECK-b2ddc3858f03ce8a02a8989a33b6333f-X\",\n            \"Content-Type\": \"application/json\"\n        },\n        json: {\n            client: reqClient,\n            PBFPubKey: req.body.PBFPubKey,\n            // alg: \"3DES-24\"\n        }\n      }, function(error, response, body){\n        console.log(JSON.stringify(body));\n        return;\n    });\n  });\n\n    \n\n  //'v1/foodtruck/:id' - DELETE\n  api.delete('/:id', authenticate, (req, res) => {\n    Card.findById(req.params.id, (err, card) => {\n      if (err) {\n        res.status(500).send(err);\n        return;\n      }\n      if (card === null) {\n        res.status(404).json({status: false, msg: \"Card not found\"});\n        return;\n      }\n      Card.remove({\n        \"_id\": req.params.id\n      },(err, card) => {\n          if (err) {\n            res.status(500).json({status: false, msg: err});\n            return;\n          }\n          Card.find({user: req.params.user}, (err, cards) => {\n            if (err) {\n              res.status(403).json({status: false, msg: err});\n              return;\n            }\n            res.json({ status: true, message: \"Fare successfully deleted\", data: cards });\n          });\n        });\n    });\n  });\n\n  return api;\n}\n"]}