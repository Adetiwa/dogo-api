{"version":3,"sources":["../../src/controller/driver.js"],"names":["config","db","api","post","req","res","passport","authenticate","err","user","info","token","status","json","msg","generateJwt","iat","exp","get","FcmToken","find","params","id","remove","logout","send","User","driver_info","$ne","_id","limit","exec","drivers","length","data","findById","name","put","body","findOne","busy","update","$set","state","value","resUser"],"mappings":"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","file":"driver.js","sourcesContent":["import { Router } from \"express\";\nimport User from \"../model/user\";\nimport Driver from \"../model/driver\";\nimport History from \"../model/history\";\nimport bodyParser from \"body-parser\";\nimport passport from \"passport\";\nimport config from \"../config\";\nimport bcrypt from 'bcryptjs';\nimport request from 'request';\nimport FcmToken from \"../model/token\";\n\nimport { generateAccessToken, respond, authenticate } from \"../middleware/authmiddleware\";\nimport { userAuthentication } from \"../middleware/adminAuth\";\nimport { getID } from \"../helpers/auth\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  // 'v1/user'\n\n\n\n\n  // 'v1/account/login'\n\n  api.post('/login', (req, res) => {\n     passport.authenticate('local', function(err, user, info){\n      var token;\n\n      // If Passport throws/catches an error\n      if (err) {\n        res.status(404).json({status: false, msg: err});\n        return;\n      }\n\n      // If a user is found\n      if(user){\n         let token = user.generateJwt();\n        res.status(200).json({\n          user: user,\n            //   fullname: user.name,\n            //   email: user.username,\n            //   tel: user.tel,\n            //   type: user.type,\n          token: token,\n          iat: user.iat,\n          exp: user.exp,\n          status: true\n        })\n      } else {\n        // If user is not found\n        res.status(401).json({status: false, msg: 'Email or password is incorrect'});\n      }\n    })(req, res)\n  });\n\n\n\n  api.get('/logout/:id', authenticate, (req, res) => {\n    FcmToken.find({ user: req.params.id }).remove((err, token) => {\n      if (err) {\n        res.status(500).json({status: false, msg: \"A server error occured\"});\n      } else {\n        // we have deleted the user\n        req.logout();\n        res.status(200).send({status: true, msg: 'success'});\n     }\n    });\n  });\n\n  \n  api.get('/getdriver/:id', authenticate, (req, res) => {\n    User.find({ driver_info: { $ne: null }, _id: {$ne: req.params.id}, \"driver_info.busy\": false, \"driver_info.active\": true, \"driver_info.verified\": true }).limit(20).exec( (err, drivers) => {\n      if (err) {\n            res.status(500).json({status: false, msg: \"A server error occured\"});\n            return;\n        }\n       if (drivers.length == 0) {\n            res.status(500).json({status: true, data: [], msg: \"No driver is available\"});\n            return;\n        } else {\n            res.status(500).json({status: true, data: drivers});\n            return;\n        }\n   });\n  });\n\n\n  api.get('/:id', authenticate, (req, res) => {\n    User.findById(req.params.id, (err, user) => {\n      if (err) {\n          if (err.name == \"CastError\") {\n            res.status(403).json({status: false, msg: 'Invalid data!'});\n          } else {\n            res.status(403).json({status: false, msg: err});\n          }\n        return;\n      }\n      res.json({status: true, data: user});\n    });\n  });\n\n\napi.put('/update', authenticate, (req, res) => {\n    User.findById(req.body.id, (err, user) => {\n      if (err) {\n          if (err.name == \"CastError\") {\n            res.status(403).json({status: false, msg: 'Invalid data!'});\n          } else {\n            res.status(403).json({status: false, msg: err});\n          }\n        return;\n      }\n\n      if (!user) {\n        res.status(500).json({status: false, msg: \"User doesn't exist\"});\n        return;\n      }\n\n      User.findOne({ _id: req.body.id }).exec( async (err, user) => {\n        if (err) {\n          res.status(403).json({status: false, msg: err});\n          return;\n        }\n        if (!user) {\n          res.status(403).json({status: false, msg: 'User not found'});\n          return;\n        }\n        if (user.driver_info.busy) {\n          res.status(403).json({status: false, msg: 'You cannot go offline, you have an active trip!'});\n          return;\n        }\n         User.update({_id: req.body.id}, {\n          $set: {\n            \"driver_info.active\": req.body.state\n          }\n        }, (err, value) => {\n          // console.log(value)\n        })\n\n        try {\n          let resUser = await User.findById(req.body.id)\n          res.status(200).json({status: true, msg: \"Success\", data: resUser});\n        } catch (Error) {\n          res.status(500).json({status: false, msg: \"A server error occured\"});\n        }\n        // User.findById(req.body.id, (err, user) => {\n        //   if (err) {\n        //     res.status(500).json({status: false, msg: \"A server error occured\"});\n        //     return;\n        //   } \n\n        //   res.status(200).json({status: true, msg: \"Success\", data: user});\n         \n        // });\n      });\n    });\n  });\n\n\n  return api;\n}\n"]}