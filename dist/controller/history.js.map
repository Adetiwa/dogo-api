{"version":3,"sources":["../../src/controller/history.js"],"names":["config","db","api","post","authenticate","req","res","History","find","$and","user","body","status","$ne","err","userFind","json","code","msg","length","driver","driverFind","User","findById","driver_info","busy","history","type","pickup","dropoff","cost","hr","km","date","Date","toISOString","payment_method","email","pickup_coords","dropoff_coords","card","save","FcmToken","token","forEach","element","histories","data","get","id","name","driver_status","params","put","serviceFare","trip","processFareRequest","secret","paystack_token","message","delete","adminAuthorization","remove","messsage"],"mappings":"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","file":"history.js","sourcesContent":["import { Router } from \"express\";\nimport History from \"../model/history\";\nimport User from \"../model/user\";\nimport Fare from \"../model/fare\";\nimport FcmToken from \"../model/token\";\nimport {  authenticate } from \"../middleware/authmiddleware\";\nimport { adminAuthorization } from \"../middleware/adminAuth\";\nimport { getID } from \"../helpers/auth\";\nimport notification from \"../services/notification\";\nimport Notification from \"../model/notification\";\nimport serviceFare from './../services/fare'\n\nimport send from \"../services/email\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n\n\n\n  api.post('/', authenticate, (req, res) => {\n    History.find({$and: [{user: req.body.user}, {status: { $ne: \"cancelled\" }}, {status: { $ne: \"completed\" }}]}, (err, userFind) => {\n      if (err) {\n        res.status(500).json({status: false, code: 100, msg: err});\n        return;\n      }\n\n      if (userFind.length > 0) {\n        res.status(500).json({status: false, code: 101, msg: \"You have an active trip going to. Reload your app, and have a good connection\"});\n        return;\n      }\n   \n      \n      History.find({$and: [{driver: req.body.driver}, {status: { $ne: \"cancelled\" }}, {status: { $ne: \"completed\" }}]}, (err, driverFind) => {\n        if (err) {\n          res.status(500).json({status: false, code: 100, msg: err});\n          return;\n        }\n  \n        if (driverFind.length > 0) {\n          res.status(500).json({status: false, code: 101, msg: \"Oops! This driver just got busy. Try with another active driver\"});\n          return;\n        }\n\n\n\n\n        User.findById(req.body.user, (err, driver) => {\n          if (err) {\n            res.status(500).json({status: false, code: 100, msg: err});\n            return;\n          }\n    \n          if (driver == null) {\n            res.status(500).json({status: false, code: 101, msg: \"Wow This driver doesn't exist\"});\n            return;\n          }\n    \n          if (driver.driver_info.busy) {\n            res.status(500).json({status: false,code: 102, msg: \"Wow This driver just became busy with another trip\"});\n            return;\n          }\n          \n        \n        let history = new History();\n        history.type = req.body.type;\n        history.pickup = req.body.pickup;\n        history.dropoff = req.body.dropoff;\n        history.cost = req.body.cost;\n        history.hr = req.body.hr;\n        history.km = req.body.km;\n        history.date = new Date().toISOString();\n        // history.driver_status = req.body.driver_status;\n        history.payment_method = req.body.payment_method;\n        // history.payment_status = req.body.payment_status;\n        // history.status = req.body.status;\n        history.email = req.body.email;\n        history.user = req.body.user;\n        history.pickup_coords = req.body.pickup_coords;\n        history.dropoff_coords = req.body.dropoff_coords;\n        \n        history.driver = req.body.driver;\n        history.card = req.body.card;\n        // history.transaction_id = req.body.transaction_id;\n        history.save(err => {\n        if (err) {\n            res.json({ status: false, msg: err });\n            return;\n        }\n        ///NOTIFY_DRIVER/// \n        FcmToken.find({user: req.body.driver}, (err, token) => {\n          if (err) {\n            res.status(500).json({status: false, msg: \"A server error occured\"});\n          } else {\n            if (token.length > 0) {\n              token.forEach(element => {\n                notification(element.token, \"Trip Assignment\", \"A trip has ben assigned to you\", element.type);\n              });\n            }\n          }\n        });\n\n    \n    \n        History.find({user: req.body.user}, (err, histories) => {\n          if (err) {\n            res.status(403).json({status: false, msg: err});\n            return;\n          }\n          res.json({status: true, data: histories, driver: driver});\n          });\n        \n          });\n        })\n\n        \n      \n      });\n\n\n    \n    });\n      \n  });\n\n\n\n  api.get('/all', authenticate, (req, res) => {\n    History.find({}, (err, histories) => {\n      if (err) {\n        res.status(403).json({status: false, msg: err});\n        return;\n      }\n      send();\n      res.json({status: true, data: histories});\n    });\n  });\n\n  api.post('/cancel', authenticate, (req, res) => {\n    History.findById(req.body.id, (err, history) => {\n        if (err) {\n          if (err.name == \"CastError\") {\n            res.status(403).json({status: false, msg: 'Invalid data!'});\n          } else {\n            res.status(403).json({status: false, msg: err});\n          }\n        return;\n      }\n      if (history == null) {\n        res.status(403).json({status: false, msg: \"This order doesn't exist\"});\n        return;\n      }\n      if (history.driver_status != null) {\n        res.status(403).json({status: false, msg: \"This order cannot be cancelled as the driver already started\"});\n        return;\n      } else {\n        history.status = \"cancelled\";\n        history.driver_status = \"cancelled\";\n        history.save(err => {\n          if (err) {\n              res.json({ status: false, msg: err });\n              return;\n          }\n\n          ///NOTIFY_DRIVER/// \n\n         \n        History.find({user: req.body.user}, (err, histories) => {\n          if (err) {\n            res.status(403).json({status: false, msg: err});\n            return;\n          }\n          res.json({status: true, data: histories, driver: null});\n          });\n        \n      });\n        \n    }\n  \n    })\n  });\n\n  api.get('/:id', authenticate, (req, res) => {\n    History.find({user: req.params.id}, (err, histories) => {\n      if (err) {\n          if (err.name == \"CastError\") {\n            res.status(403).json({status: false, msg: 'Invalid data!'});\n          } else {\n            res.status(403).json({status: false, msg: err});\n          }\n        return;\n      }\n      res.json({status: true, data: histories,driver: null});\n    });\n  });\n\n  api.get('/driver/:id', authenticate, (req, res) => {\n    History.find({driver: req.params.id}, (err, histories) => {\n      if (err) {\n          if (err.name == \"CastError\") {\n            res.status(403).json({status: false, msg: 'Invalid data!'});\n          } else {\n            res.status(403).json({status: false, msg: err});\n          }\n        return;\n      }\n      res.json({status: true, data: histories,driver: null});\n    });\n  });\n  \n\n\n  api.put('/:id', authenticate, async (req, res) => {\n    \n    try {\n      let history = await serviceFare.trip.processFareRequest(req.params.id, req.body.status, req.body.driver_status, config.secret.paystack_token);\n      // let user = await User.findById(req.body.user);\n      // let driverHistories = await History.find({driver: user._id})\n      return res.json({data: history})\n    } catch (Error) {\n      res.status(500).json({status: false, message: Error})\n    }\n  });\n  \n\n  api.delete('/:id', adminAuthorization, (req, res) => {\n \n    History.findById(req.params.id).remove((err, history) => {\n      if (err) {\n        res.status(500).json({status: false, msg: err.messsage});\n      } else {\n        History.find({}, (err, histories) => {\n            if (err) {\n            res.status(403).json({status: false, msg: err});\n            return;\n            }\n            res.json({ status: true, message: \"History successfully created\", data: histories });\n        });\n     }\n    });\n\n  });\n\n\n  return api;\n}\n"]}