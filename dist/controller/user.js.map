{"version":3,"sources":["../../src/controller/user.js"],"names":["config","db","api","post","req","res","type","body","tel","email","User","findOne","username","err","user","status","send","msg","thisUserType","includes","driver_info","update","_id","$addToSet","data","console","log","save","request","url","secret","json","password","error","response","register","name","code","message","passport","authenticate","session","info","token","generateJwt","id","fullname","iat","exp","get","FcmToken","find","params","remove","logout","put","findById","setPassword"],"mappings":"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","file":"user.js","sourcesContent":["import mongoose from \"mongoose\";\nimport { Router } from \"express\";\nimport User from \"../model/user\";\nimport Driver from \"../model/driver\";\nimport bodyParser from \"body-parser\";\nimport passport from \"passport\";\nimport config from \"../config\";\nimport bcrypt from 'bcryptjs';\nimport request from 'request';\nimport FcmToken from \"../model/token\";\n\nimport { generateAccessToken, respond, authenticate } from \"../middleware/authmiddleware\";\nimport { userAuthentication } from \"../middleware/adminAuth\";\nimport { getID } from \"../helpers/auth\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  // 'v1/user'\n\n  api.post('/register', (req, res) => {\n    let type = req.body.type;\n    let tel = req.body.tel;\n    let email = req.body.email;\n    \n    User.findOne({username: email, tel: tel}, (err, user) => {\n      if(err) {\n        res.status(500).send({status: false, msg: err});\n        return;\n      }\n      \n      if (user !== null) {\n        let thisUserType = user.type;\n        if (thisUserType.includes(type)) {\n          //throw error\n          res.status(200).send({status: false, msg: `This account is already a ${type} account`});\n          return;\n        \n        } else {\n          if (type == 'driver') {\n            user.driver_info = req.body.driver_info;\n            User.update(\n              {_id: user._id}, \n              {\n                $addToSet: {\n                \"type\": \"driver\"\n              }\n            }, (err, data) => {\n              console.log(data)\n            })\n            \n            user.save((err, user) => {\n              if (err) {\n                res.status(500).send({status: false, msg: err});\n                return;\n              }\n              // res.status(500).send({status: true, msg: 'Driver saved'});\n              request.post({\n                url: config.secret.url+'v1/user/login',\n                json: { email: req.body.email, password: req.body.password }\n                }, function(error, response, body){\n                  if (error) {\n                    res.status(500).send({status: false, msg: error});\n                    return;\n                  } else {\n                    res.status(200).send(response.body);\n                  }\n              });\n              \n              return;\n            });\n            return;\n            // user.type = user.type.push('driver');\n            // user.driver_info = req.body.user_info;\n            // user.save((err, user) => {\n            //   if (err) {\n            //     res.status(500).send({status: false, msg: err});\n            //     return;\n            //   }\n            //   res.status(500).send({status: false, msg: 'Driver saved'});\n            // });\n          } \n          //login!!!\n          \n          //   request.post({\n          //     url: config.secret.url+'v1/user/login',\n          //     json: { email: user.email, password: user.password }\n          //   }, function(error, response, body){\n          //     if (error) {\n          //       res.status(500).send({status: false, msg: error});\n          //       return;\n          //     } else {\n          //       res.status(200).send(response.body);\n          //     }\n          // });\n          return;\n          }\n        }  else if (req.body.type == 'user'){\n        User.register(new User({ username: req.body.email, name: req.body.name, tel: req.body.tel, type: req.body.type }), req.body.password, (err, user) => {\n          if (err) {\n            if(err.code == 11000) {\n              res.status(500).send({status: false, msg: 'This number has been used by an existing user'});\n            } else {\n              res.status(500).send({status: false, msg: err.message});\n            }\n            return;\n          }\n          passport.authenticate(\n            'local', {\n              session: false\n            })(req, res, () => {\n    \n                request.post({\n                    url: config.secret.url+'v1/user/login',\n                    json: { email: req.body.email, password: req.body.password }\n                  }, function(error, response, body){\n                    if (error) {\n                      res.status(500).send({status: false, msg: error});\n                      return;\n                    } else {\n                      res.status(200).send(response.body);\n                    }\n                });\n    \n            });\n    \n        });\n      } else if (req.body.type == 'driver'){\n        User.register(new User({ username: req.body.email, name: req.body.name, tel: req.body.tel, type: req.body.type, driver_info: req.body.driver_info }), req.body.password, (err, user) => {\n          if (err) {\n            if(err.code == 11000) {\n              res.status(500).send({status: false, msg: 'This number has been used by an existing user'});\n            } else {\n              res.status(500).send({status: false, msg: err.message});\n            }\n            return;\n          }\n          passport.authenticate(\n            'local', {\n              session: false\n            })(req, res, () => {\n    \n                request.post({\n                    url: config.secret.url+'v1/user/login',\n                    json: { email: req.body.email, password: req.body.password }\n                  }, function(error, response, body){\n                    if (error) {\n                      res.status(500).send({status: false, msg: error});\n                      return;\n                    } else {\n                      res.status(200).send(response.body);\n                    }\n                });\n    \n            });\n    \n        });\n      }\n      });\n      \n    });\n    \n\n\n  // 'v1/account/login'\n\n  api.post('/login', (req, res) => {\n     passport.authenticate('local', function(err, user, info){\n      var token;\n\n      // If Passport throws/catches an error\n      if (err) {\n        res.status(404).json({status: false, msg: err});\n        return;\n      }\n\n      // If a user is found\n      if(user){\n         let token = user.generateJwt();\n          res.status(200).json({\n            // user: user,\n              id: user._id,\n              fullname: user.name,\n              email: user.username,\n              tel: user.tel,\n              type: user.type,\n              token: token,\n              driver_info: user.driver_info,\n              iat: user.iat,\n              exp: user.exp,\n              status: true\n          })\n      } else {\n        // If user is not found\n        res.status(401).json({status: false, msg: 'Email or password is incorrect'});\n      }\n    })(req, res)\n  });\n\n\n\n  api.get('/logout/:id', authenticate, (req, res) => {\n    FcmToken.find({ user: req.params.id }).remove((err, token) => {\n      if (err) {\n        res.status(500).json({status: false, msg: \"A server error occured\"});\n      } else {\n        // we have deleted the user\n        req.logout();\n        res.status(200).send({status: true, msg: 'success'});\n     }\n    });\n  });\n\n  api.put('/change_password', authenticate, (req, res) => {\n    User.findById(req.body.user, (err, user) => {\n      if (err) {\n        res.status(500).json({status: false, msg: \"A server error occured\"});\n        return;\n      }\n      if (!user) {\n        res.status(500).json({status: false, msg: \"User doesn't exist\"});\n        return;\n      }\n      user.setPassword(req.body.password, (err, user) => {\n        if (err) {\n          res.status(500).json({status: false, msg: \"A server error occured\"});\n          return;\n        } \n        user.save((err) => {\n          if (err) {\n            res.status(500).json({status: false, msg: \"A server error occured\"});\n            return;\n          } \n\n          res.status(200).json({status: false, msg: \"Password successfully changed\", data: user});\n          return;\n       \n        \n        })  \n      });\n    })\n  })\n\n\n  api.get('/:id', authenticate, (req, res) => {\n    User.findById(req.params.id, (err, user) => {\n      if (err) {\n          if (err.name == \"CastError\") {\n            res.status(403).json({status: false, msg: 'Invalid data!'});\n          } else {\n            res.status(403).json({status: false, msg: err});\n          }\n        return;\n      }\n      res.json({status: true, data: user});\n    });\n  });\n\n  \n  return api;\n}\n"]}