{"version":3,"sources":["../../src/helpers/index.js"],"names":["getKey","seckey","md5","require","keymd5","keymd5last12","substr","seckeyadjusted","replace","seckeyadjustedfirst12","encrypt","key","text","CryptoJS","forge","utf8","cipher","createCipher","util","createBuffer","start","iv","update","finish","encrypted","output","encode64","getBytes","getPublicKey"],"mappings":";;;;;AAAA;AACA,SAASA,MAAT,CAAgBC,MAAhB,EAAuB;AACrB,MAAIC,MAAMC,QAAQ,KAAR,CAAV;AACA,MAAIC,SAASF,IAAID,MAAJ,CAAb;AACA,MAAII,eAAeD,OAAOE,MAAP,CAAc,CAAC,EAAf,CAAnB;;AAEA,MAAIC,iBAAiBN,OAAOO,OAAP,CAAe,UAAf,EAA2B,EAA3B,CAArB;AACA,MAAIC,wBAAwBF,eAAeD,MAAf,CAAsB,CAAtB,EAAyB,EAAzB,CAA5B;;AAEA,SAAOG,wBAAwBJ,YAA/B;AACD;;AAED;AACA,SAASK,OAAT,CAAiBC,GAAjB,EAAsBC,IAAtB,EACA;AACE,MAAIC,WAAWV,QAAQ,WAAR,CAAf;AACA,MAAIW,QAAWX,QAAQ,YAAR,CAAf;AACA,MAAIY,OAAWZ,QAAQ,MAAR,CAAf;AACA,MAAIa,SAAWF,MAAME,MAAN,CAAaC,YAAb,CAA0B,UAA1B,EAAsCH,MAAMI,IAAN,CAAWC,YAAX,CAAwBR,GAAxB,CAAtC,CAAf;AACAK,SAAOI,KAAP,CAAa,EAACC,IAAG,EAAJ,EAAb;AACAL,SAAOM,MAAP,CAAcR,MAAMI,IAAN,CAAWC,YAAX,CAAwBP,IAAxB,EAA8B,OAA9B,CAAd;AACAI,SAAOO,MAAP;AACA,MAAIC,YAAYR,OAAOS,MAAvB;AACA,SAASX,MAAMI,IAAN,CAAWQ,QAAX,CAAoBF,UAAUG,QAAV,EAApB,CAAT;AACD;;AAGD;;AAEA;;AAEA,SAASC,YAAT,GAAuB;AACvB;AACA;AACC;;kBAEc;AACb5B,gBADa;AAEb4B,4BAFa;AAGblB;AAHa,C","file":"index.js","sourcesContent":["// this is the getKey function that generates an encryption Key for you by passing your Secret Key as a parameter.\nfunction getKey(seckey){\n  var md5 = require('md5');\n  var keymd5 = md5(seckey);\n  var keymd5last12 = keymd5.substr(-12);\n\n  var seckeyadjusted = seckey.replace('FLWSECK-', '');\n  var seckeyadjustedfirst12 = seckeyadjusted.substr(0, 12);\n\n  return seckeyadjustedfirst12 + keymd5last12;\n}\n\n// This is the encryption function that encrypts your payload by passing the stringified format and your encryption Key.\nfunction encrypt(key, text)\n{\n  var CryptoJS = require('crypto-js');\n  var forge    = require('node-forge');\n  var utf8     = require('utf8');\n  var cipher   = forge.cipher.createCipher('3DES-ECB', forge.util.createBuffer(key));\n  cipher.start({iv:''});\n  cipher.update(forge.util.createBuffer(text, 'utf-8'));\n  cipher.finish();\n  var encrypted = cipher.output;\n  return ( forge.util.encode64(encrypted.getBytes()) );\n}\n\n\n/**** THIS ENCRYPTION SECTION IS FOR FRONT END ECRYPTION***/\n\n// Encryption can also be done at the front end using `RSA Encryption`:\n\nfunction getPublicKey(){\n// write function to generate Public Key here using RSA Encryption\n// see cryptico docs on how to do that.\n}\n\nexport default {\n  getKey,\n  getPublicKey,\n  encrypt,\n}"]}