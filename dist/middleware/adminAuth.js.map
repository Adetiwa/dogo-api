{"version":3,"sources":["../../src/middleware/adminAuth.js"],"names":["adminAuthorization","req","res","next","auth","headers","authorization","token","split","decoded","jwt","verify","config","secret","type","status","json","msg","err","message","userAuthentication","id","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,qBAAqB,SAArBA,kBAAqB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3C,MAAIC,OAAOH,IAAII,OAAJ,CAAYC,aAAvB;AACA,MAAIF,IAAJ,EAAU;AACR,QAAIG,QAAQH,KAAKI,KAAL,CAAW,GAAX,CAAZ;AACA,QAAI;AACA,UAAIC,UAAUC,uBAAIC,MAAJ,CAAWJ,MAAM,CAAN,CAAX,EAAqBK,iBAAOC,MAAP,CAAcA,MAAnC,CAAd;AACA,UAAIJ,QAAQK,IAAR,IAAgB,OAApB,EAA6B;AACzBX;AACH,OAFD,MAEO;AACLD,YAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACD,QAAQ,KAAT,EAAgBE,KAAK,qCAArB,EAArB;AACA;AACD;AACF,KARH,CAQI,OAAMC,GAAN,EAAW;AACXhB,UAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACD,QAAQ,KAAT,EAAgBE,KAAKC,IAAIC,OAAzB,EAArB;AACA;AACD;AACF,GAdH,MAcS;AACLjB,QAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACD,QAAQ,KAAT,EAAgBE,KAAK,iCAArB,EAArB;AACA;AACD;AAEJ,CArBD;;AAwBA,IAAIG,qBAAqB,SAArBA,kBAAqB,CAACnB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3C,MAAIC,OAAOH,IAAII,OAAJ,CAAYC,aAAvB;AACA,MAAIF,IAAJ,EAAU;;AAER,QAAIG,QAAQH,KAAKI,KAAL,CAAW,GAAX,CAAZ;AACA,QAAI;AACA,UAAIC,UAAUC,uBAAIC,MAAJ,CAAWJ,MAAM,CAAN,CAAX,EAAqBK,iBAAOC,MAAP,CAAcA,MAAnC,CAAd;AACAV,WAAKM,QAAQY,EAAb;AACD,KAHH,CAGI,OAAMH,GAAN,EAAW;AACXhB,UAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACD,QAAQ,KAAT,EAAgBE,KAAKC,IAAIC,OAAzB,EAArB;AACA;AACD;AACF,GAVH,MAUS;AACLjB,QAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACD,QAAQ,KAAT,EAAgBE,KAAK,iCAArB,EAArB;AACA;AACD;AACJ,CAhBD;;AAmBAK,OAAOC,OAAP,GAAiB;AACfvB,wCADe;AAEfoB;AAFe,CAAjB","file":"adminAuth.js","sourcesContent":["import User from \"../model/user\";\nimport jwt from \"jsonwebtoken\";\nimport expressJwt from \"express-jwt\";\nimport config from '../config';\n\nlet adminAuthorization = (req, res, next) => {\n  var auth = req.headers.authorization;\n  if (auth) {\n    var token = auth.split(' ');\n    try {\n        var decoded = jwt.verify(token[1], config.secret.secret);\n        if (decoded.type == 'admin') {\n            next();\n        } else {\n          res.status(403).json({status: false, msg: \"You have no access to this resource\"})\n          return;\n        }\n      } catch(err) {\n        res.status(403).json({status: false, msg: err.message})\n        return;\n      }\n    } else {\n      res.status(403).json({status: false, msg: \"Authorization-Token is required\"})\n      return;\n    }\n\n}\n\n\nlet userAuthentication = (req, res, next) => {\n  var auth = req.headers.authorization;\n  if (auth) {\n    \n    var token = auth.split(' ');\n    try {\n        var decoded = jwt.verify(token[1], config.secret.secret);\n        next(decoded.id);\n      } catch(err) {\n        res.status(403).json({status: false, msg: err.message})\n        return;\n      }\n    } else {\n      res.status(403).json({status: false, msg: \"Authorization-Token is required\"})\n      return;\n    } \n}\n\n\nmodule.exports = {\n  adminAuthorization,\n  userAuthentication\n};\n"]}