{"version":3,"sources":["../../src/model/user.js"],"names":["mongoose","require","bcrypt","crypto","Schema","TOKENTIME","SECRET","userSchema","name","type","String","required","email","tel","unique","password","Array","default","driver_info","Object","date","Date","now","plugin","passportLocalMongoose","methods","generateJwt","authenticate","secret","config","token","jwt","sign","id","expiresIn","getID","auth","req","headers","authorization","split","decoded","verify","err","res","status","json","msg","message","module","exports","model"],"mappings":";;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;;;AANA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASD,QAAQ,eAAR,CAAf;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;;;AAMA,IAAMG,SAASJ,SAASI,MAAxB;;AAEA,IAAMC,YAAY,MAAlB,C,CAA0B;AAC1B,IAAMC,SAAS,8BAAf;;AAEA,IAAIC,aAAa,IAAIP,SAASI,MAAb,CAAoB;AACnCI,QAAM;AACJC,UAAMC,MADF;AAEJC,cAAU;AAFN,GAD6B;AAKnCC,SAAO;AACLH,UAAMC;AADD,GAL4B;AAQnCG,OAAK;AACHJ,UAAMC,MADH;AAEHI,YAAS,IAFN;AAGHH,cAAU;AAHP,GAR8B;AAanCI,YAAU;AACRN,UAAMC;AADE,GAbyB;AAgBnCD,QAAM;AACJA,UAAMO,KADF;AAEJC,aAAS;AAFL,GAhB6B;AAoBnCC,eAAa;AACXT,UAAMU,MADK;AAEXF,aAAS;AAFE,GApBsB;AAwBnCG,QAAO;AACLX,UAAMY,IADD;AAELJ,aAASI,KAAKC;AAFT;AAxB4B,CAApB,CAAjB;;AA8BAf,WAAWgB,MAAX,CAAkBC,+BAAlB;AACAjB,WAAWkB,OAAX,CAAmBC,WAAnB,GAAiC,YAAW;AAC1C;AACA;;AAEA,MAAIC,eAAe,0BAAW,EAAEC,QAAQC,iBAAOD,MAAP,CAAcA,MAAxB,EAAX,CAAnB;;AAEA,MAAIE,QAAQC,uBAAIC,IAAJ,CAAS;AACnBC,QAAI,KAAKA,EADU;AAEnBxB,UAAM,KAAKA;AAFQ,GAAT,EAIZoB,iBAAOD,MAAP,CAAcA,MAJF,EAIU;AAClBM,eAAW7B;AADO,GAJV,CAAZ;AAOA,SAAOyB,KAAP;AACD,CAdD;;AAiBAvB,WAAWkB,OAAX,CAAmBU,KAAnB,GAA2B,YAAW;AACpC,MAAIC,OAAOC,IAAIC,OAAJ,CAAYC,aAAvB;AACA,MAAIT,QAAQM,KAAKI,KAAL,CAAW,GAAX,CAAZ;AACA,MAAI;AACA,QAAIC,UAAUV,uBAAIW,MAAJ,CAAWZ,MAAM,CAAN,CAAX,EAAqBD,iBAAOD,MAAP,CAAcA,MAAnC,CAAd;AACA,WAAOa,QAAQR,EAAf;AACH,GAHD,CAGE,OAAMU,GAAN,EAAW;AACXC,QAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACD,QAAQ,KAAT,EAAgBE,KAAKJ,IAAIK,OAAzB,EAArB;AACA;AACD;AAEF,CAXD;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIAC,OAAOC,OAAP,GAAiBlD,SAASmD,KAAT,CAAe,MAAf,EAAuB5C,UAAvB,CAAjB;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"user.js","sourcesContent":["const mongoose = require('mongoose');\nconst bcrypt = require('bcrypt-nodejs');\nconst crypto = require('crypto');\nimport passportLocalMongoose from \"passport-local-mongoose\";\nimport config from '../config';\nimport expressJwt from \"express-jwt\";\nimport jwt from \"jsonwebtoken\";\n\nconst Schema = mongoose.Schema;\n\nconst TOKENTIME = '365d'; //1 year\nconst SECRET = \"rr34r3m4r34r3 4r34r3k4r34r3 \";\n\nvar userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n  },\n  email: {\n    type: String\n  },\n  tel: {\n    type: String,\n    unique : true,\n    required: true,\n  },\n  password: {\n    type: String\n  },\n  type: {\n    type: Array,\n    default: 'user'\n  },\n  driver_info: {\n    type: Object,\n    default: null\n  },\n  date:  { \n    type: Date, \n    default: Date.now\n  }\n});\n\nuserSchema.plugin(passportLocalMongoose);\nuserSchema.methods.generateJwt = function() {\n  // var expiry = new Date();\n  // expiry.setDate(expiry.getDate() + 7);\n\n  let authenticate = expressJwt({ secret: config.secret.secret });\n\n  let token = jwt.sign({\n    id: this.id,\n    type: this.type\n  },\n  config.secret.secret, {\n      expiresIn: TOKENTIME\n  });\n  return token\n};\n\n\nuserSchema.methods.getID = function() {\n  var auth = req.headers.authorization;\n  var token = auth.split(' ');\n  try {\n      var decoded = jwt.verify(token[1], config.secret.secret);\n      return decoded.id;\n  } catch(err) {\n    res.status(403).json({status: false, msg: err.message})\n    return;\n  }\n\n};\n\n\n\n//hashing a password before saving it to the database\n// userSchema.pre('save', function (next) {\n//   var user = this;\n//   bcrypt.hash(user.password, 10, function (err, hash){\n//     if (err) {\n//       return next(err);\n//     }\n//     user.password = hash;\n//     next();\n//   })\n// });\n\n\n\nmodule.exports = mongoose.model('User', userSchema);\n\n\n//\n// userSchema.methods.gravatar = function(size) {\n//   if(!size) size = 200;\n//   if(!this.email) return 'https://gravatar.com/avartar/?s'+size+'&d=retro';\n//   var md5 = crypto.createHash('md5').update(this.email).digest('hex');\n//   return 'https://gravatar.com/avartar/?s'+md5+'&d=retro';\n// }\n//\n//\n// userSchema.methods.comparePassword = function(password) {\n//   return bcrypt.compareSync(password, this.password);\n// }\n//\n//\n// module.exports = mongoose.model('User', userSchema);\n"]}