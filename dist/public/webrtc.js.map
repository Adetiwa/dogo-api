{"version":3,"sources":["../../src/public/webrtc.js"],"names":["localVideo","localStream","remoteVideo","remoteStream","peerConnection","uuid","serverConnection","io","socket","on","data","console","log","peerConnectionConfig","pageReady","createUUID","document","getElementById","message","gotMessageFromServer","constraints","video","audio","navigator","mediaDevices","getUserMedia","then","getUserMediaSuccess","catch","errorHandler","alert","stream","srcObject","handleRemoveStreamEvent","event","closeVideoCall","handleICEConnectionStateChangeEvent","iceConnectionState","getTracks","forEach","track","stop","close","handleICEGatheringStateChangeEvent","JSON","stringify","handleSignalingStateChangeEvent","signalingState","handleNegotiationNeededEvent","start","isCaller","RTCPeerConnection","onicecandidate","gotIceCandidate","onaddstream","gotRemoteStreams","onremovestream","oniceconnectionstatechange","onicegatheringstatechange","onsignalingstatechange","onnegotiationneeded","addStream","createOffer","createdDescription","sdp","setRemoteDescription","RTCSessionDescription","type","createAnswer","ice","addIceCandidate","RTCIceCandidate","candidate","send","description","setLocalDescription","localDescription","createdDescriptionAnwser","error","hangUpCall","name","myUsername","target","targetUsername","s4","Math","floor","random","toString","substring"],"mappings":";;AAAA,IAAIA,UAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,cAAJ;AACA,IAAIC,IAAJ;AACA,IAAIC,mBAAmBC,IAAvB;AACA,IAAIC,SAASD,IAAb;;AAEAD,iBAAiBG,EAAjB,CAAoB,SAApB,EAA+B,UAASC,IAAT,EAAe;AACxCC,UAAQC,GAAR,CAAY,WAAZ;AACL,CAFD;;AAIA,IAAIC,uBAAuB;AACzB,gBAAc,CACZ,EAAC,QAAQ,iCAAT,EADY,EAEZ,EAAC,QAAQ,8BAAT,EAFY;AADW,CAA3B;;AAOA,SAASC,SAAT,GAAqB;AACnBT,SAAOU,YAAP;;AAEAf,eAAagB,SAASC,cAAT,CAAwB,YAAxB,CAAb;AACAf,gBAAcc,SAASC,cAAT,CAAwB,aAAxB,CAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,mBAAiBG,EAAjB,CAAoB,SAApB,EAA+B,UAASS,OAAT,EAAkB;AAC7CC,yBAAqBD,OAArB;AACH,GAFD;;AAIA,MAAIE,cAAc;AAChBC,WAAO,IADS;AAEhBC,WAAO;AAFS,GAAlB;;AAKA,MAAGC,UAAUC,YAAV,CAAuBC,YAA1B,EAAwC;AACtCF,cAAUC,YAAV,CAAuBC,YAAvB,CAAoCL,WAApC,EAAiDM,IAAjD,CAAsDC,mBAAtD,EAA2EC,KAA3E,CAAiFC,YAAjF;AACD,GAFD,MAEO;AACLC,UAAM,gDAAN;AACD;AACF;;AAED,SAASH,mBAAT,CAA6BI,MAA7B,EAAqC;AACnC9B,gBAAc8B,MAAd;AACA/B,aAAWgC,SAAX,GAAuBD,MAAvB;AACD;;AAGD,SAASE,uBAAT,CAAiCC,KAAjC,EAAwC;AACtCC;AACD;;AAED,SAASC,mCAAT,CAA6CF,KAA7C,EAAoD;AAClD;AACA;AACA;;;AAGA,UAAO9B,eAAeiC,kBAAtB;AACE,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,cAAL;AACEF;AACA;AALJ;AAOD;;AAED,SAASA,cAAT,GAA0B;AACxBL,QAAM,gBAAN;AACA,MAAI1B,cAAJ,EAAoB;AACpB,QAAIF,YAAY8B,SAAhB,EAA2B;AACzB9B,kBAAY8B,SAAZ,CAAsBM,SAAtB,GAAkCC,OAAlC,CAA0C;AAAA,eAASC,MAAMC,IAAN,EAAT;AAAA,OAA1C;AACAvC,kBAAY8B,SAAZ,GAAwB,IAAxB;AACD;;AAED,QAAIhC,WAAWgC,SAAf,EAA0B;AACxBhC,iBAAWgC,SAAX,CAAqBM,SAArB,GAAiCC,OAAjC,CAAyC;AAAA,eAASC,MAAMC,IAAN,EAAT;AAAA,OAAzC;AACAzC,iBAAWgC,SAAX,GAAuB,IAAvB;AACD;;AAED5B,mBAAesC,KAAf;AACAtC,qBAAiB,IAAjB;AACD;AACA;;AAED,SAASuC,kCAAT,CAA4CT,KAA5C,EAAmD;AACjD;AACA;AACAvB,UAAQC,GAAR,CAAY,sBAAZ,EAAoCgC,KAAKC,SAAL,CAAeX,KAAf,CAApC;AACD;;AAGD,SAASY,+BAAT,CAAyCZ,KAAzC,EAAgD;AAC9C;AACA;AACA;AACAvB,UAAQC,GAAR,CAAY,8BAAZ,EAA4CgC,KAAKC,SAAL,CAAeX,KAAf,CAA5C;AACA,UAAO9B,eAAe2C,cAAtB;AACG,SAAK,QAAL;AACEZ;AACA;AAHL;AAKD;;AAGD,SAASa,4BAAT,CAAsCd,KAAtC,EAA6C;AAC3C;AACA;AACAvB,UAAQC,GAAR,CAAY,2BAAZ,EAAyCgC,KAAKC,SAAL,CAAeX,KAAf,CAAzC;AACD;;AAED,SAASe,KAAT,CAAeC,QAAf,EAAyB;AACvB9C,mBAAiB,IAAI+C,iBAAJ,CAAsBtC,oBAAtB,CAAjB;AACAT,iBAAegD,cAAf,GAAgCC,eAAhC;AACAjD,iBAAekD,WAAf,GAA6BC,gBAA7B;AACAnD,iBAAeoD,cAAf,GAAgCvB,uBAAhC;AACA7B,iBAAeqD,0BAAf,GAA4CrB,mCAA5C;AACDhC,iBAAesD,yBAAf,GAA2Cf,kCAA3C;AACAvC,iBAAeuD,sBAAf,GAAwCb,+BAAxC;AACA1C,iBAAewD,mBAAf,GAAqCZ,4BAArC;;AAEC;AACA5C,iBAAeyD,SAAf,CAAyB5D,WAAzB;;AAEA,MAAGiD,QAAH,EAAa;AACX9C,mBAAe0D,WAAf,GAA6BpC,IAA7B,CAAkCqC,kBAAlC,EAAsDnC,KAAtD,CAA4DC,YAA5D;AACD,GAFD,MAEO;AACL;AACD;AACF;;AAED,SAASV,oBAAT,CAA8BD,OAA9B,EAAuC;AACrCP,UAAQC,GAAR,CAAY,cAAZ,EAA2BgC,KAAKC,SAAL,CAAe3B,OAAf,CAA3B;AACA,MAAG,CAACd,cAAJ,EAAoB6C,MAAM,KAAN;;AAEpB;AACA;AACA;AACA,MAAG/B,QAAQb,IAAR,IAAgBA,IAAnB,EAAyB;;AAEzB,MAAGa,QAAQ8C,GAAX,EAAgB;AACd5D,mBAAe6D,oBAAf,CAAoC,IAAIC,qBAAJ,CAA0BhD,QAAQ8C,GAAlC,CAApC,EAA4EtC,IAA5E,CAAiF,YAAW;AAC1F;AACA,UAAGR,QAAQ8C,GAAR,CAAYG,IAAZ,IAAoB,OAAvB,EAAgC;AAC9B/D,uBAAegE,YAAf,GAA8B1C,IAA9B,CAAmCqC,kBAAnC,EAAuDnC,KAAvD,CAA6DC,YAA7D;AACD;AACF,KALD,EAKGD,KALH,CAKSC,YALT;AAMD,GAPD,MAOO,IAAGX,QAAQmD,GAAX,EAAgB;AACrBjE,mBAAekE,eAAf,CAA+B,IAAIC,eAAJ,CAAoBrD,QAAQmD,GAA5B,CAA/B,EAAiEzC,KAAjE,CAAuEC,YAAvE;AACD;AACF;;AAED,SAASwB,eAAT,CAAyBnB,KAAzB,EAAgC;AAC9B,MAAGA,MAAMsC,SAAN,IAAmB,IAAtB,EAA4B;AAC1BlE,qBAAiBmE,IAAjB,CAAsB7B,KAAKC,SAAL,CAAe,EAAC,OAAOX,MAAMsC,SAAd,EAAyBL,MAAM,mBAA/B,EAAoD,QAAQ9D,IAA5D,EAAf,CAAtB;AACA;AACD;AACF;;AAED,SAAS0D,kBAAT,CAA4BW,WAA5B,EAAyC;AACzC;;AAEEtE,iBAAeuE,mBAAf,CAAmCD,WAAnC,EAAgDhD,IAAhD,CAAqD,YAAW;AAC9DpB,qBAAiBmE,IAAjB,CAAsB,EAAC,OAAOrE,eAAewE,gBAAvB,EAAyC,QAAQ,aAAjD,EAAgE,QAAQvE,IAAxE,EAAtB;AACF;AACC,GAHD,EAGGuB,KAHH,CAGSC,YAHT;AAID;;AAED,SAASgD,wBAAT,CAAkCH,WAAlC,EAA+C;AAC/C;;AAEEtE,iBAAeuE,mBAAf,CAAmCD,WAAnC,EAAgDhD,IAAhD,CAAqD,YAAW;AAC9DpB,qBAAiBmE,IAAjB,CAAsB,EAAC,OAAOrE,eAAewE,gBAAvB,EAAyC,QAAQ,cAAjD,EAAiE,QAAQvE,IAAzE,EAAtB;AACF;AACC,GAHD,EAGGuB,KAHH,CAGSC,YAHT;AAID;;AAGD,SAAS0B,gBAAT,CAA0BrB,KAA1B,EAAiC;AAC/BvB,UAAQC,GAAR,CAAY,mBAAZ,EAAiCsB,KAAjC;AACA/B,iBAAe+B,KAAf;AACAhC,cAAY8B,SAAZ,GAAwBE,MAAMH,MAA9B;AACD;;AAED,SAASF,YAAT,CAAsBiD,KAAtB,EAA6B;AAC3BnE,UAAQC,GAAR,CAAYkE,KAAZ;AACD;;AAED,SAASC,UAAT,GAAsB;AACpB5C;AACA7B,mBAAiBmE,IAAjB,CAAsB;AACpBO,UAAMC,UADc;AAEpBC,YAAQC,cAFY;AAGpBhB,UAAM;AAHc,GAAtB;AAKD;;AAED;AACA;AACA,SAASpD,UAAT,GAAsB;AACpB,WAASqE,EAAT,GAAc;AACZ,WAAOC,KAAKC,KAAL,CAAW,CAAC,IAAID,KAAKE,MAAL,EAAL,IAAsB,OAAjC,EAA0CC,QAA1C,CAAmD,EAAnD,EAAuDC,SAAvD,CAAiE,CAAjE,CAAP;AACD;;AAED,SAAOL,OAAOA,IAAP,GAAc,GAAd,GAAoBA,IAApB,GAA2B,GAA3B,GAAiCA,IAAjC,GAAwC,GAAxC,GAA8CA,IAA9C,GAAqD,GAArD,GAA2DA,IAA3D,GAAkEA,IAAlE,GAAyEA,IAAhF;AACD","file":"webrtc.js","sourcesContent":["var localVideo;\nvar localStream;\nvar remoteVideo;\nvar remoteStream;\nvar peerConnection;\nvar uuid;\nvar serverConnection = io();\nvar socket = io();\n\nserverConnection.on('connect', function(data) {\n      console.log('connected');\n});\n\nvar peerConnectionConfig = {\n  'iceServers': [\n    {'urls': 'stun:stun.stunprotocol.org:3478'},\n    {'urls': 'stun:stun.l.google.com:19302'},\n  ]\n};\n\nfunction pageReady() {\n  uuid = createUUID();\n\n  localVideo = document.getElementById('localVideo');\n  remoteVideo = document.getElementById('remoteVideo');\n  //console.log('uuid is '+ uuid);\n  // serverConnection.send({\n  //                type: \"uuid\",\n  //                data: uuid\n  //            })\n  //serverConnection = new WebSocket('wss://' + window.location.hostname + ':8443');\n  serverConnection.on('message', function(message) {\n      gotMessageFromServer(message);\n  });\n\n  var constraints = {\n    video: true,\n    audio: true,\n  };\n\n  if(navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices.getUserMedia(constraints).then(getUserMediaSuccess).catch(errorHandler);\n  } else {\n    alert('Your browser does not support getUserMedia API');\n  }\n}\n\nfunction getUserMediaSuccess(stream) {\n  localStream = stream;\n  localVideo.srcObject = stream;\n}\n\n\nfunction handleRemoveStreamEvent(event) {\n  closeVideoCall();\n}\n\nfunction handleICEConnectionStateChangeEvent(event) {\n  //new for start\n  //checking for when user iniutiated call but no answer\n  //completed for when all done\n\n\n  switch(peerConnection.iceConnectionState) {\n    case \"closed\":\n    case \"failed\":\n    case \"disconnected\":\n      closeVideoCall();\n      break;\n  }\n}\n\nfunction closeVideoCall() {\n  alert('Call cancelled');\n  if (peerConnection) {\n  if (remoteVideo.srcObject) {\n    remoteVideo.srcObject.getTracks().forEach(track => track.stop());\n    remoteVideo.srcObject = null;\n  }\n\n  if (localVideo.srcObject) {\n    localVideo.srcObject.getTracks().forEach(track => track.stop());\n    localVideo.srcObject = null;\n  }\n\n  peerConnection.close();\n  peerConnection = null;\n}\n}\n\nfunction handleICEGatheringStateChangeEvent(event) {\n  // Our sample just logs information to console here,\n  // but you can do whatever you need.\n  console.log(\"Ice gathering state \", JSON.stringify(event))\n}\n\n\nfunction handleSignalingStateChangeEvent(event) {\n  // Our sample just logs information to console here,\n  // but you can do whatever you need.\n  //stable for start\n  console.log(\"Signaling state change event\", JSON.stringify(event))\n  switch(peerConnection.signalingState) {\n     case \"closed\":\n       closeVideoCall();\n       break;\n   }\n}\n\n\nfunction handleNegotiationNeededEvent(event) {\n  // Our sample just logs information to console here,\n  // but you can do whatever you need.\n  console.log(\"Handle negotiontion event\", JSON.stringify(event))\n}\n\nfunction start(isCaller) {\n  peerConnection = new RTCPeerConnection(peerConnectionConfig);\n  peerConnection.onicecandidate = gotIceCandidate;\n  peerConnection.onaddstream = gotRemoteStreams;\n  peerConnection.onremovestream = handleRemoveStreamEvent;\n  peerConnection.oniceconnectionstatechange = handleICEConnectionStateChangeEvent;\n peerConnection.onicegatheringstatechange = handleICEGatheringStateChangeEvent;\n peerConnection.onsignalingstatechange = handleSignalingStateChangeEvent;\n peerConnection.onnegotiationneeded = handleNegotiationNeededEvent;\n\n  //ontrack\n  peerConnection.addStream(localStream);\n\n  if(isCaller) {\n    peerConnection.createOffer().then(createdDescription).catch(errorHandler);\n  } else {\n    //peerConnection.createAnswer().then(createdDescriptionAnwser).catch(errorHandler);\n  }\n}\n\nfunction gotMessageFromServer(message) {\n  console.log(\"From server \",JSON.stringify(message));\n  if(!peerConnection) start(false);\n\n  //var signal = JSON.parse(message.data);\n  //console.log('signal is ',signal)\n  // Ignore messages from ourself\n  if(message.uuid == uuid) return;\n\n  if(message.sdp) {\n    peerConnection.setRemoteDescription(new RTCSessionDescription(message.sdp)).then(function() {\n      // Only create answers in response to offers\n      if(message.sdp.type == 'offer') {\n        peerConnection.createAnswer().then(createdDescription).catch(errorHandler);\n      }\n    }).catch(errorHandler);\n  } else if(message.ice) {\n    peerConnection.addIceCandidate(new RTCIceCandidate(message.ice)).catch(errorHandler);\n  }\n}\n\nfunction gotIceCandidate(event) {\n  if(event.candidate != null) {\n    serverConnection.send(JSON.stringify({'ice': event.candidate, type: \"new-ice-candidate\", 'uuid': uuid}));\n    ///console.log(JSON.stringify({'ice': event.candidate, 'uuid': uuid}));\n  }\n}\n\nfunction createdDescription(description) {\n///  console.log('got description');\n\n  peerConnection.setLocalDescription(description).then(function() {\n    serverConnection.send({'sdp': peerConnection.localDescription, 'type': 'video-offer', 'uuid': uuid});\n  //  console.log(JSON.stringify({'sdp': peerConnection.localDescription, 'type': 'video-offer', 'uuid': uuid}));\n  }).catch(errorHandler);\n}\n\nfunction createdDescriptionAnwser(description) {\n///  console.log('got description');\n\n  peerConnection.setLocalDescription(description).then(function() {\n    serverConnection.send({'sdp': peerConnection.localDescription, 'type': 'video-answer', 'uuid': uuid});\n  //  console.log(JSON.stringify({'sdp': peerConnection.localDescription, 'type': 'video-offer', 'uuid': uuid}));\n  }).catch(errorHandler);\n}\n\n\nfunction gotRemoteStreams(event) {\n  console.log('got remote stream', event);\n  remoteStream = event;\n  remoteVideo.srcObject = event.stream;\n}\n\nfunction errorHandler(error) {\n  console.log(error);\n}\n\nfunction hangUpCall() {\n  closeVideoCall();\n  serverConnection.send({\n    name: myUsername,\n    target: targetUsername,\n    type: \"hang-up\"\n  });\n}\n\n// Taken from http://stackoverflow.com/a/105074/515584\n// Strictly speaking, it's not a real UUID, but it gets the job done here\nfunction createUUID() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n"]}