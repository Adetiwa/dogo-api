{"version":3,"sources":["../../src/routes/user.js"],"names":["router","require","Router","User","passport","passportCongig","route","get","req","res","next","render","message","flash","post","findOne","email","body","err","user","redirect","name","photo","gravatar","password","save","logIn","json","authenticate","successRedirect","failureRedirect","failureFlash","logout","module","exports"],"mappings":";;AAAA,IAAMA,SAASC,QAAQ,SAAR,EAAmBC,MAAnB,EAAf;AACA,IAAMC,OAAOF,QAAQ,gBAAR,CAAb;AACA,IAAMG,WAAWH,QAAQ,UAAR,CAAjB;AACA,IAAMI,iBAAiBJ,QAAQ,oBAAR,CAAvB;;AAGAD,OAAOM,KAAP,CAAa,SAAb,EACGC,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvBD,MAAIE,MAAJ,CAAW,iBAAX,EAA8B,EAACC,SAASJ,IAAIK,KAAJ,CAAU,QAAV,CAAV,EAA9B;AACD,CAHH,EAIGC,IAJH,CAIQ,UAACN,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxBP,OAAKY,OAAL,CAAa,EAACC,OAAOR,IAAIS,IAAJ,CAASD,KAAjB,EAAb,EAAsC,UAASE,GAAT,EAAcC,IAAd,EAAoB;AACxD,QAAGA,IAAH,EAAS;AACPX,UAAIK,KAAJ,CAAU,QAAV,EAAoB,+CAApB;AACAJ,UAAIW,QAAJ,CAAa,SAAb;AACD,KAHD,MAGO;AACL,UAAID,OAAO,IAAIhB,IAAJ,EAAX;AACAgB,WAAKE,IAAL,GAAYb,IAAIS,IAAJ,CAASI,IAArB;AACAF,WAAKH,KAAL,GAAaR,IAAIS,IAAJ,CAASD,KAAtB;AACAG,WAAKG,KAAL,GAAaH,KAAKI,QAAL,EAAb;AACAJ,WAAKK,QAAL,GAAgBhB,IAAIS,IAAJ,CAASO,QAAzB;AACAL,WAAKM,IAAL,CAAU,UAASP,GAAT,EAAc;AACtBV,YAAIkB,KAAJ,CAAUP,IAAV,EAAgB,UAASD,GAAT,EAAc;AAC5B,cAAGA,GAAH,EAAQ,OAAOR,KAAKQ,GAAL,CAAP;AACRT,cAAIW,QAAJ,CAAa,GAAb;AACD,SAHD;AAID,OALD;AAOD;AACF,GAlBD;AAmBD,CAxBH;;AA6BEpB,OAAOO,GAAP,CAAW,UAAX,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjCA,MAAIkB,IAAJ,CAAS,aAAT;AACH,CAFD;;AASA3B,OAAOM,KAAP,CAAa,QAAb,EACGC,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvB,MAAIF,IAAIW,IAAR,EAAcV,IAAIW,QAAJ,CAAa,GAAb;AACdX,MAAIE,MAAJ,CAAW,gBAAX,EAA6B,EAACC,SAASJ,IAAIK,KAAJ,CAAU,cAAV,CAAV,EAA7B;AACD,CAJH,EAKGC,IALH,CAKQV,SAASwB,YAAT,CAAsB,aAAtB,EAAqC;AACzCC,mBAAiB,GADwB;AAEzCC,mBAAiB,QAFwB;AAGzCC,gBAAc;AAH2B,CAArC,CALR;;AAYF/B,OAAOO,GAAP,CAAW,QAAX,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvCF,MAAIwB,MAAJ;AACAvB,MAAIW,QAAJ,CAAa,GAAb;AACD,CAHD;;AAOEa,OAAOC,OAAP,GAAiBlC,MAAjB","file":"user.js","sourcesContent":["const router = require('express').Router();\nconst User = require('../models/user');\nconst passport = require('passport');\nconst passportCongig = require('../config/passport');\n\n\nrouter.route('/signup')\n  .get((req, res, next) => {\n    res.render('accounts/signup', {message: req.flash('errors')})\n  })\n  .post((req, res, next) => {\n    User.findOne({email: req.body.email}, function(err, user) {\n      if(user) {\n        req.flash('errors', 'account with that email address already exist');\n        res.redirect('/signup')\n      } else {\n        var user = new User();\n        user.name = req.body.name;\n        user.email = req.body.email;\n        user.photo = user.gravatar();\n        user.password = req.body.password;\n        user.save(function(err) {\n          req.logIn(user, function(err) {\n            if(err) return next(err);\n            res.redirect('/');\n          });\n        });\n\n      }\n    });\n  });\n\n\n\n\n  router.get('/olumide', (req, res) => {\n      res.json('Hello world');\n  });\n\n\n\n\n\n\n  router.route('/login')\n    .get((req, res, next) => {\n      if (req.user) res.redirect('/');\n      res.render('accounts/login', {message: req.flash('loginMessage')})\n    })\n    .post(passport.authenticate('local-login', {\n      successRedirect: '/',\n      failureRedirect: '/login',\n      failureFlash: true,\n    }));\n\n\nrouter.get('logout', (req, res, next) => {\n  req.logout();\n  res.redirect('/');\n});\n\n\n\n  module.exports = router;\n"]}