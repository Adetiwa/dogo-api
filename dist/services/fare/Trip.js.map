{"version":3,"sources":["../../../src/services/fare/Trip.js"],"names":["Trip","tripMinute","trip","createdTime","cost","historyId","history","_id","n","Date","getHours","night","hours","minutes","getMinute","date","one_way","type","processCost","model","fare","findOne","Math","ceil","parseFloat","first_3_hours","per_min","one_way_charge","night_charge","currentTime","newdate","driverId","find","driver","driverHistries","id","status","driver_status","token","getTripById","getFareCost","console","log","payment_method","request","post","url","headers","json","authorization_code","card","email","amount","error","response","body","data","payment_status","date_finished","now","$or","user","err","length","forEach","element","save","findById","module","exports"],"mappings":"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","file":"Trip.js","sourcesContent":["'use strict'\n\nimport model from './../../model'\nimport request from \"request\"\nimport notification from \"./../notification\";\nclass Trip\n{\n    constructor() {\n        this.tripMinute = 0\n        this.trip = null\n        this.createdTime = null\n        this.cost = 0\n        this.historyId = null\n    }\n\n    /**\n     * \n     */\n    getFareCost(history) {\n        this.historyId = history._id\n\n        var n = new Date().getHours();\n        let night = 0;\n        let hours = 0;\n        let minutes = this.getMinute(history.date)\n        let one_way = 0;\n        \n        if (n > 18 || n < 6) {\n          night = 1;\n        }\n\n        if (minutes >= 180) {\n          hours = 1;\n        }\n\n\n        if (history.type == 'one_way') {\n            one_way = 1;\n        } else {\n            one_way = 0;\n        }\n        let cost = this.processCost(one_way, night, hours, minutes)\n        this.cost = cost\n\n        return cost\n    }\n   \n    async processCost(one_way, night, hours, minutes) {\n        let history = this.trip\n        try{\n            let fare = await model.fare.findOne({type: history.type})\n            var cost = 0;\n            if (fare != null) {\n                if (hours != 1) {\n                    cost = Math.ceil(parseFloat(hours * fare.first_3_hours));\n                } else {\n                    cost = Math.ceil(parseFloat(hours * fare.first_3_hours) + parseFloat(fare.per_min * (minutes - 180)) + parseFloat(one_way * fare.one_way_charge) + parseFloat(night * fare.night_charge)); \n                }\n                this.cost = cost\n                \n                return cost\n            } \n            \n            return cost\n        } catch(Error) {\n            if(Error) {\n                throw Error\n            }\n        }\n    }\n\n\n    /**\n     * get the history minute\n     * @param {*} createdTime \n     */\n    getMinute(createdTime) {\n        let currentTime =  new Date()\n        let newdate = new Date(createdTime)\n        let minutes = ((currentTime - newdate)/60000);\n\n        this.minutes = minutes\n\n        return minutes\n    }\n\n    async getDriverHistories (driverId) {\n        let driverHistries = await model.history.find({driver: driverId})\n\n        return driverHistries\n    }\n\n    async processFareRequest(id, status, driver_status, token) {\n\n        let history = await this.getTripById(id);\n        \n        let cost = await this.getFareCost(history);\n        console.log(\"Cost is\",cost);\n\n        if ((driver_status == 'completed') && (history.payment_method == 'CARD')) {\n            //console.log(`Stage 1`);\n            await request.post({\n                url: 'https://api.paystack.co/transaction/charge_authorization',\n                headers : {\n                \"Authorization\" : \"Bearer \"+token\n                },\n                json: { \n                    authorization_code: history.card, \n                    email: history.email,\n                    amount: this.cost * 100\n                }\n            }, function(error, response, body){\n                console.log(`Stage 1 {body.status}`);\n        \n            if(body.status) {\n                if (response.body.data.status === \"success\") {\n                //good!!!!\n                history.payment_status = \"completed\";\n                history.driver_status = \"completed\";\n                history.status = \"completed\";\n                history.cost = cost;\n                history.date_finished = Date.now();\n            \n\n                //  history.save( () => {\n                //     console.log('Saved');\n                //     console.log(history);\n                //     // let dr =  this.getDriverHistories(history.driver);\n                //     // return dr;\n                //     return history;\n                // }); \n                // history.save();\n                // return history;\n                } else {\n                    history.payment_status = null;\n                    history.driver_status = \"completed\";\n                    history.cost = cost;\n\n                // history.save()\n                // return history;\n                }\n            } else {\n                // return body.message\n            }\n          }); \n\n        //   history.save()\n        } else if((driver_status == 'completed') && history.payment_method == 'CASH') {\n            history.payment_status = 'completed'\n            history.driver_status = 'completed'\n            history.status = 'completed'\n            history.date_finished = Date.now();\n            history.cost = cost\n\n            // history.save()\n            // return history;\n        } else {\n            history.driver_status = driver_status\n            history.status = status\n            // history.cost = cost\n\n            // history.save()\n            // return history;\n        }\n\n        model.token.find({$or:[{user: history.user},{driver: history.driver}]}, (err, token) => {\n        // model.token.find({user: history.user, driver: history.driver}, (err, token) => {\n            if (err) {\n                console.log(err);\n            } else {\n                console.log(token.length);\n                if (token.length > 0) {\n                token.forEach(element => {\n                    notification(element.token, `Trip ${driver_status}`, `Driver has ${driver_status} trip ${driver_status == 'completed' ? '- ₦'+ cost : ''}`, element.type);\n                });\n                } else {\n                // console.log(\"No token\");\n                }\n             }\n        });\n\n\n        // history.save()\n        return  history.save( () => {\n                    console.log('Saved');\n                    // console.log(history);\n                    // let dr =  this.getDriverHistories(history.driver);\n                    // return dr;\n                    return history;\n                }); \n        // return history;\n        \n    }\n\n    async getTripById(id) {\n\n        let trip = await model.history.findById(id)\n        \n        this.trip = trip\n\n        return trip\n    }\n}\n\nmodule.exports = Trip"]}